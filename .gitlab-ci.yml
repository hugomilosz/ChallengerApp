image: node:latest

stages:
  - install
  - build
  - test
  - lint
  - docker-build

cache:
 key: modules
 paths:
  - node_modules/

install:
  stage: install
  cache:
    key: modules
    paths:
      - node_modules/
  after_script:
    - node -v && npm -v
  script:
    - npm cache clean --force
    - npm rebuild
    - npm install

build:
  image: node:latest
  stage: build
  cache:
    key: modules
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run build
    - echo "Build Successfully!"

unit-test:
  image: node:latest
  stage: test
  cache:
    key: modules
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    paths:
      - coverage/
    when: always
    reports:
      junit:
        - junit.xml

lint:
  image: node:latest
  stage: lint
  cache:
    key: modules
    paths:
      - node_modules/
    policy: pull
  script:
    - npm run lint
    - echo "All style good!"

docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY_PASSWORD $CI_REGISTRY 
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
    - echo "Registry image:" $CI_REGISTRY_IMAGE
